<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Markdown to HTML Table Example</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background-color: #1e1e1e; color: #dcdcdc; }
        h2 { color: #ffcc00; }
        pre { background-color: #252526; padding: 10px; border-radius: 5px; white-space: pre-wrap; word-wrap: break-word; font-size: 14px; }
        .json-block { background-color: #2d2d2d; padding: 10px; border-radius: 5px; font-family: monospace; }
        .json-key { color: #9cdcfe; }
        .json-string { color: #ce9178; }
        .json-number { color: #b5cea8; }
        a { color: #4ea9ff; text-decoration: none; }

        /* Style for Tables */
        .table-container {
            overflow-x: auto;
            margin-bottom: 20px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            background-color: #333;
        }

        table, th, td {
            border: 1px solid #666;
        }

        th, td {
            padding: 10px;
            text-align: left;
        }

        th {
            background-color: #444;
            color: #fff;
        }

        td {
            background-color: #2d2d2d;
            color: #dcdcdc;
        }

        a {
            color: #4ea9ff;
            text-decoration: none;
        }
    </style>
</head>
<body>

    <h2>Small JSON Data</h2>
    <div class="json-block">
        <p><span class="json-string">${NAME}</span> | <img src="https://example.com/icon.png" width="20" height="20" alt="Icon"></p>
        <p>ID: <span class="json-number">12345</span></p>
    </div>

    <h2>Saved Markdown Table 1 (Values Only)</h2>
    <div class="table-container" id="table1">
        <pre>
| Value1 | Value2 | Value3 |
|--------|--------|--------|
| 123    | ABC    | ![icon](https://example.com/icon.png) |
| 456    | DEF    | ![icon](https://example.com/icon2.png) |
        </pre>
    </div>

    <h2>Competition Results</h2>
    <div class="table-container" id="table2">
        <pre>
| Corp1 Name | Corp1 Score | Corp2 Name | Corp2 Score | Time Ended |
|------------|-------------|------------|-------------|------------|
| [Corp1](https://corp1.com) | 5000 | [Corp2](https://corp2.com) | 4500 | <timestamp:1718200000000> |
| [Corp3](https://corp3.com) | 3200 | [Corp4](https://corp4.com) | 3100 | <timestamp:1718210000000> |
        </pre>
    </div>

    <h2>Artifact Boost Status</h2>
    <p id="boostStatus">Checking...</p>

    <h2>Message</h2>
    <p>Made with data from <a href="https://example.com">Example Source</a></p>
    <p>Last edit: [Placeholder]</p>

    <script>
        // Markdown to HTML Table conversion function
        function convertMarkdownToHTML(markdown) {
            // Convert markdown table into HTML table format
            const lines = markdown.split("\n").filter(line => line.trim() !== "");
            const headers = lines[0].split("|").map(header => header.trim()).slice(1, -1);
            const rows = lines.slice(2);

            // Start table structure
            let tableHTML = "<table><thead><tr>";

            // Add headers
            headers.forEach(header => {
                tableHTML += `<th>${header}</th>`;
            });

            tableHTML += "</tr></thead><tbody>";

            // Add rows
            rows.forEach(row => {
                const cols = row.split("|").map(col => col.trim()).slice(1, -1);
                tableHTML += "<tr>";
                cols.forEach(col => {
                    tableHTML += `<td>${col}</td>`;
                });
                tableHTML += "</tr>";
            });

            tableHTML += "</tbody></table>";
            return tableHTML;
        }

        // Convert timestamp to local time (e.g., Discord-style <timestamp:unix_time>)
        function convertTimestampToLocalTime(markdown) {
            return markdown.replace(/<timestamp:(\d+)>/g, (match, unixTimestamp) => {
                const localDate = new Date(parseInt(unixTimestamp));
                return `<t:${Math.floor(localDate.getTime() / 1000)}:F>`;  // Format as Discord-style timestamp
            });
        }

        // Convert Markdown links [text](url) to <a href="url">text</a>
        function convertLinksToHyperlinks(markdown) {
            return markdown.replace(/\[([^\]]+)\]\(([^)]+)\)/g, (match, text, url) => {
                return `<a href="${url}" target="_blank">${text}</a>`;
            });
        }

        // Get the markdown content
        const table1Markdown = document.querySelector("#table1 pre").textContent;
        const table2Markdown = document.querySelector("#table2 pre").textContent;

        // Convert the Markdown tables to HTML
        const table1HTML = convertMarkdownToHTML(table1Markdown);
        const table2HTML = convertMarkdownToHTML(table2Markdown);

        // Convert timestamps and links in the markdown
        const table2HTMLWithLinks = convertLinksToHyperlinks(convertTimestampToLocalTime(table2HTML));

        // Replace markdown with HTML table
        document.getElementById("table1").innerHTML = table1HTML;
        document.getElementById("table2").innerHTML = table2HTMLWithLinks;

        // Example Unix timestamps (in milliseconds)
        const artifactBoostEnd = 1718192400000; // Example timestamp
        const now = Date.now();

        document.getElementById('boostStatus').innerText =
            now > artifactBoostEnd ? "Boost has ended." : "Boost is active!";
    </script>

</body>
</html>
