<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Markdown Table with Lazy Loaded Icons</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #1e1e1e;
            color: #dcdcdc;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            background-color: #333;
        }

        th, td {
            padding: 10px;
            text-align: left;
            border: 1px solid #666;
        }

        th {
            background-color: #444;
            color: #fff;
        }

        .lazy-icon {
            width: 32px;
            height: 32px;
            background-color: #666;
        }

     body { 
    font-family: Arial, sans-serif; 
    margin: 20px; 
    background-color: #1e1e1e; 
    color: #dcdcdc; 
}

h2 { 
    color: #ffcc00; 
    background-color: #444; /* Gray background */
    border: 2px solid #666; /* Gray border */
    padding: 5px; /* Padding around the text */
    border-radius: 5px; /* Rounded corners */
}

p {
    background-color: #444; /* Gray background */
    border: 2px solid #666; /* Gray border */
    padding: 5px; /* Padding around the text */
    border-radius: 5px; /* Rounded corners */
}

pre { 
    background-color: #252526; 
    padding: 10px; 
    border-radius: 5px; 
    white-space: pre-wrap; 
    word-wrap: break-word; 
    font-size: 14px; 
}

.json-block { 
    background-color: #2d2d2d; 
    padding: 10px; 
    border-radius: 5px; 
    font-family: monospace; 
}

.json-key { 
    color: #9cdcfe; 
}

.json-string { 
    color: #ce9178; 
}

.json-number {
    color: #b5cea8;
    font-size: clamp(12px, 4vw, 18px); /* Adjusts size between 12px and 18px based on viewport width */
    word-wrap: break-word; /* Ensures long numbers break onto the next line */
    overflow-wrap: break-word;
    max-width: 100%; /* Prevents overflow */
}

a { 
    color: #4ea9ff; 
    text-decoration: none; 
}

/* Style for Tables */
.table-container {
    overflow-x: auto;
    margin-bottom: 20px;
}

table {
    width: 100%;
    border-collapse: collapse;
    background-color: #333;
}

table, th, td {
    border: 1px solid #666;
}

th, td {
    padding: 10px;
    text-align: left;
}

th {
    background-color: #444;
    color: #fff;
}

td {
    background-color: #2d2d2d;
    color: #dcdcdc;
}

a {
    color: #4ea9ff;
    text-decoration: none;
}

    
    </style>
</head>
<body>
    <h2>$NAMEHERE</h2>
    <p id="loading-status" class="loading-status">Loading: 0/0</p>
    <div id="table-container"></div>
<md>
$MDHERE
</md>


    <script>
        
      function loadMarkdownTable() {
    document.addEventListener("DOMContentLoaded", () => {
        console.log("DOMContentLoaded event triggered.");

        // Find the <md> tag and get its markdown content
        const mdElement = document.querySelector('md');
        if (mdElement) {
            console.log("<md> tag found. Extracting content...");
            const markdown = mdElement.textContent.trim();
            console.log("Markdown extracted: ", markdown);
            
            // Remove the <md> element from the DOM after extracting content
            mdElement.remove();
            console.log("<md> tag removed from the DOM.");
            
            // Now, process the markdown content to generate the table
            generateTableFromMarkdown(markdown);
        } else {
            console.log("<md> tag not found.");
        }
    });
}

function decodeBase64(base64String) {
    console.log("Decoding base64 string:", base64String);
    try {
        const decoded = decodeURIComponent(escape(atob(base64String)));
        console.log("Decoded value:", decoded);
        return decoded;
    } catch (error) {
        console.error("Error decoding base64:", error);
        return base64String;
    }
}

function checkArtefactBoost(endTime) {
    const currentTime = Math.floor(Date.now() / 1000);
    console.log("Current time:", currentTime, "Artefact end time:", endTime);

    if (endTime > currentTime) {
        const boostEndTime = new Date(endTime * 1000).toUTCString();
        console.log(`Artefact boost is active, will end on ${boostEndTime}`);
        return `Active, Will end on ${boostEndTime} UTC`;
    }

    console.log("Artefact boost is inactive.");
    return "Inactive";
}

function loadRowsSlowly(rows, interval, batchSize = 4) {
    let index = 0;
    const totalRows = rows.length;
    console.log(`Total rows to load: ${totalRows}`);
    document.getElementById("loading-status").textContent = `Loading: 0/${totalRows}`;

    const intervalId = setInterval(() => {
        // Load `batchSize` rows at once
        const endIndex = Math.min(index + batchSize, totalRows);
        console.log(`Loading rows ${index + 1} to ${endIndex}`);

        for (let i = index; i < endIndex; i++) {
            document.getElementById("table-body").innerHTML += rows[i];
        }

        index = endIndex;
        document.getElementById("loading-status").textContent = `Loading: ${index}/${totalRows}`;

        if (index >= totalRows) {
            clearInterval(intervalId);
            console.log("All rows loaded.");
            document.getElementById("loading-status").textContent = "Loading complete";
            // Remove the <p> loadimg element here
            const loadImgElement = document.getElementById("loading-status");
            if (loadImgElement) {
                loadImgElement.remove();
                console.log("<p> loadimg element removed.");
            }
        }
    }, interval);
}


async function loadMarkdownTable() {
    console.log("Waiting for the DOM to be ready...");

    await new Promise(resolve => setTimeout(resolve, 100)); // Small delay to ensure content is inserted

    const mdElement = document.querySelector('md');
    if (mdElement) {
        console.log("<md> tag found. Extracting content...");
        const markdown = mdElement.textContent.trim();
        console.log("Markdown extracted: ", markdown);

        mdElement.remove(); // Remove placeholder
        console.log("<md> tag removed.");

        generateTableFromMarkdown(markdown);
        
        // Ensure lazy load runs again
        initializeLazyLoad();
    } else {
        console.log("<md> tag not found.");
    }
}

function initializeLazyLoad() {
    console.log("Initializing lazy loading...");

    const lazyImages = document.querySelectorAll(".lazy-icon");

    lazyImages.forEach(img => {
        img.onerror = function () {
            console.warn("Failed to load image:", img.dataset.src);
            this.src = "https://raw.githubusercontent.com/DrMineword/databasd_and_randomthings_wscd/refs/heads/main/corp_data/def/favicon.png";
        };
        img.src = img.dataset.src; // Trigger image load
    });

    console.log("Lazy loading applied to", lazyImages.length, "images.");
}

// Call the function
loadMarkdownTable();












function remove_empty(delay, element) {
    setTimeout(() => {
        // Get all <p> elements inside the specified element
        const paragraphs = document.querySelectorAll(element);
        
        paragraphs.forEach(p => {
            // Check if the <p> element is empty
            if (!p.innerHTML.trim()) {
                p.remove(); // Remove the empty <p> element
            }
        });
    }, delay);
}

// Usage example:
remove_empty(3000, 'p'); // Removes empty <p> elements after 3 seconds



async function name_icon(name_base64, icon_base64) {
    try {
        // Decode and set page title with proper encoding handling for unusual characters
        const decodedTitle = decodeBase64(name_base64);
        document.title = decodedTitle;

        // Convert Base64 to Blob
        const byteCharacters = atob(icon_base64);
        const byteNumbers = new Array(byteCharacters.length);
        for (let i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        const blob = new Blob([byteArray], { type: "image/png" });
        const blobUrl = URL.createObjectURL(blob);

        // Set favicon using Blob URL
        let link = document.querySelector("link[rel~='icon']");
        if (!link) {
            link = document.createElement("link");
            link.rel = "icon";
            document.head.appendChild(link);
        }
        link.href = blobUrl;

    } catch (error) {
        console.error("Error setting name or icon:", error);
    }
}

// Helper function to decode Base64 properly for Unicode support
function decodeBase64(base64) {
    const binaryString = atob(base64);
    const byteArray = new Uint8Array(binaryString.length);

    // Convert binary string to Uint8Array
    for (let i = 0; i < binaryString.length; i++) {
        byteArray[i] = binaryString.charCodeAt(i);
    }

    // Decode the byte array using TextDecoder (to handle any Unicode characters)
    const decoder = new TextDecoder("utf-8");
    return decoder.decode(byteArray);
}



// colors

function set_background(base64) {
    const img = new Image();
    img.src = "data:image/png;base64," + base64;
    img.crossOrigin = "Anonymous";  

    img.onload = function() {
        const canvas = document.createElement("canvas");
        const ctx = canvas.getContext("2d");

        canvas.width = img.width;
        canvas.height = img.height;
        ctx.drawImage(img, 0, 0, img.width, img.height);

        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
        const pixels = imageData.data;

        let colorCounts = {};
        let step = 4 * Math.floor((canvas.width * canvas.height) / 500);

        let uniqueColors = new Set();
        for (let i = 0; i < pixels.length; i += step) {
            let r = pixels[i];
            let g = pixels[i + 1];
            let b = pixels[i + 2];
            uniqueColors.add(`${r},${g},${b}`);
        }

        uniqueColors = Array.from(uniqueColors).map(c => c.split(",").map(Number));

        function rgbToHex([r, g, b]) {
            return `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)}`;
        }

        function getContrastColor([r, g, b]) {
            const brightness = (r * 299 + g * 587 + b * 114) / 1000;
            return brightness > 128 ? "#000000" : "#FFFFFF";
        }

        let colorIndex = 0;
        let progress = 0;
        let direction = 1;

        function animateGradient() {
            progress += direction * 0.002;
            if (progress >= 1) {
                progress = 0;
                colorIndex = (colorIndex + 1) % uniqueColors.length;
            }

            let nextColorIndex = (colorIndex + 1) % uniqueColors.length;

            function interpolateColor(colorA, colorB, factor) {
                return colorA.map((c, i) => Math.round(c + (colorB[i] - c) * factor));
            }

            let interpolated1 = interpolateColor(uniqueColors[colorIndex], uniqueColors[nextColorIndex], progress);
            let interpolated2 = interpolateColor(uniqueColors[(colorIndex + 2) % uniqueColors.length], uniqueColors[(nextColorIndex + 2) % uniqueColors.length], progress);

            let bgColor1 = rgbToHex(interpolated1);
            let bgColor2 = rgbToHex(interpolated2);
            document.body.style.background = `linear-gradient(to right, ${bgColor1}, ${bgColor2})`;

            // Removed logic to change h2 text color.
            requestAnimationFrame(animateGradient);
        }

        animateGradient();
    };
}

// colors

$SCRIPT+HERE
    </script>
</body>
</html>
